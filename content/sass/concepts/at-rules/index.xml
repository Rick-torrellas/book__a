<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>at-rules on Book</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/</link><description>Recent content in at-rules on Book</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Fri, 23 Sep 2022 11:12:07 +0000</lastBuildDate><atom:link href="https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/index.xml" rel="self" type="application/rss+xml"/><item><title>CSS At-Rules</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/css-at-ruless/</link><pubDate>Sun, 25 Sep 2022 11:31:01 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/css-at-ruless/</guid><description>Sass supports all the at-rules that are part of CSS proper. To stay flexible and forwards-compatible with future versions of CSS, Sass has general support that covers almost all at-rules by default. A CSS at-rule is written @&amp;lt;name&amp;gt; &amp;lt;value&amp;gt;, @&amp;lt;name&amp;gt; { ... }, or @&amp;lt;name&amp;gt; &amp;lt;value&amp;gt; { ... }. The name must be an identifier, and the value (if one exists) can be pretty much anything. Both the name and the value can contain interpolation.</description></item><item><title>@at-root</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/at-root/</link><pubDate>Sun, 25 Sep 2022 11:23:42 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/at-root/</guid><description>Lo que hace es sacar un selector que este anidado dentro de otro selector o selectores, lo lleva a la raiz del documento.
The @at-root rule is usually written @at-root { &amp;hellip; } and causes everything within it to be emitted at the root of the document instead of using the normal nesting. It&amp;rsquo;s most often used when doing advanced nesting with the SassScript parent selector and selector functions.
For example, suppose you want to write a selector that matches the outer selector and an element selector.</description></item><item><title>@extend</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/extend/</link><pubDate>Sun, 25 Sep 2022 10:39:23 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/extend/</guid><description>La regla extend es un poco confusa, es muy parecida a los mixins con la diferencia, que no inserta el codigo en el lugar donde se extiende, si no mas bien, lo agrega a la declaracion que se esta extendiendo.
Si tengo:
.nav { color: red; } .nav--error { @extend .nav; background-color: black; } El resultado seria:
.nav, .nav--error { color: red; } .nav--error { background-color: black; } Para la metodologia BEM funciona perfecto, ya no vas a volver a usar el selector .</description></item><item><title>@function</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/function/</link><pubDate>Sat, 24 Sep 2022 21:48:10 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/function/</guid><description>Functions allow you to define complex operations on SassScript values that you can re-use throughout your stylesheet. They make it easy to abstract out common formulas and behaviors in a readable way.
Functions are defined using the @function at-rule, which is written @function &amp;lt;name&amp;gt;(&amp;lt;arguments...&amp;gt;) { ... }. A function’s name can be any Sass identifier. It can only contain universal statements, as well as the @return at-rule which indicates the value to use as the result of the function call.</description></item><item><title>@while</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/while/</link><pubDate>Sat, 24 Sep 2022 21:23:34 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/while/</guid><description>source: official web
The @while rule, written @while { &amp;hellip; }, evaluates its block if its expression returns true. Then, if its expression still returns true, it evaluates its block again. This continues until the expression finally returns false.
@use &amp;#34;sass:math&amp;#34;; /// Divides `$value` by `$ratio` until it&amp;#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &amp;gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } Although @while is necessary for a few particularly complex stylesheets, you’re usually better of using either @each or @for if either of them will work.</description></item><item><title>@for</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/for/</link><pubDate>Sat, 24 Sep 2022 21:13:17 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/for/</guid><description>source: official docs
The @for rule, written @for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; to &amp;lt;expression&amp;gt; { ... } or @for &amp;lt;variable&amp;gt; from &amp;lt;expression&amp;gt; through &amp;lt;expression&amp;gt; { ... }, counts up or down from one number (the result of the first expression) to another (the result of the second) and evaluates a block for each number in between. Each number along the way is assigned to the given variable name. If to is used, the final number is excluded; if through is used, it&amp;rsquo;s included.</description></item><item><title>@each</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/each/</link><pubDate>Sat, 24 Sep 2022 21:02:52 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/each/</guid><description>source: official docs
The @each rule makes it easy to emit styles or evaluate code for each element of a list or each pair in a map. It’s great for repetitive styles that only have a few variations between them. It’s usually written @each &amp;lt;variable&amp;gt; in &amp;lt;expression&amp;gt;{ &amp;hellip; }, where the expression returns a list. The block is evaluated for each element of the list in turn, which is assigned to the given variable name.</description></item><item><title>@if</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/if/</link><pubDate>Sat, 24 Sep 2022 20:58:14 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/if/</guid><description>The @if rule is written @if &amp;lt;expression&amp;gt; { &amp;hellip; }, and it controls whether or not its block gets evaluated (including emitting any styles as CSS). The expression usually returns either true or false—if the expression returns true, the block is evaluated, and if the expression returns false it’s not.
SCSS SYNTAX @mixin avatar($size, $circle: false) { width: $size; height: $size; @if $circle { border-radius: $size / 2; } } .</description></item><item><title>@error</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/error/</link><pubDate>Fri, 23 Sep 2022 17:21:46 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/error/</guid><description>When writing mixins and functions that take arguments, you usually want to ensure that those arguments have the types and formats your API expects. If they aren&amp;rsquo;t, the user needs to be notified and your mixin/function needs to stop running.
Sass makes this easy with the @error rule, which is written @error . It prints the value of the expression (usually a string) along with a stack trace indicating how the current mixin or function was called.</description></item><item><title>@warn</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/warn/</link><pubDate>Fri, 23 Sep 2022 17:12:55 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/warn/</guid><description>When writing mixins and functions, you may want to discourage users from passing certain arguments or certain values. They may be passing legacy arguments that are now deprecated, or they may be calling your API in a way that’s not quite optimal.
The @warn rule is designed just for that. It’s written @warn and it prints the value of the expression (usually a string) for the user, along with a stack trace indicating how the current mixin or function was called.</description></item><item><title>@debug</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/debug/</link><pubDate>Fri, 23 Sep 2022 17:06:43 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/debug/</guid><description>Sometimes it’s useful to see the value of a variable or expression while you’re developing your stylesheet. That’s what the @debug rule is for: it’s written @debug &amp;lt;expression&amp;gt;, and it prints the value of that expression, along with the filename and line number.
@mixin inset-divider-offset($offset, $padding) { $divider-offset: (2 * $padding) + $offset; @debug &amp;#34;divider offset: #{$divider-offset}&amp;#34;; margin-left: $divider-offset; width: calc(100% - #{$divider-offset}); } The exact format of the debug message varies from implementation to implementation.</description></item><item><title>@use</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/use/</link><pubDate>Fri, 23 Sep 2022 16:00:34 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/use/</guid><description>Esta regla permite cargar variables, funciones y mixin, para que esten dispobles en el archivo.
The @use rule loads mixins, functions, and variables from other Sass stylesheets, and combines CSS from multiple stylesheets together. Stylesheets loaded by @use are called &amp;ldquo;modules&amp;rdquo;. Sass also provides built-in modules full of useful functions.
The simplest @use rule is written @use &amp;ldquo;&amp;lt;url&amp;gt;&amp;rdquo;, which loads the module at the given URL. Any styles loaded this way will be included exactly once in the compiled CSS output, no matter how many times those styles are loaded.</description></item><item><title>@forward</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/forward/</link><pubDate>Fri, 23 Sep 2022 15:19:04 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/forward/</guid><description>Lo que te permite esta recla es cargar archivos con sus variables, funciones y mixins y reunirlos en un solo archivo, para luego ser usado con un @use o con el archivo principal final. Por lo general se usa un index para agrupar.
The @forward rule loads a Sass stylesheet and makes its mixins, functions, and variables available when your stylesheet is loaded with the @use rule. It makes it possible to organize Sass libraries across many files, while allowing their users to load a single entrypoint file.</description></item><item><title>@mixin and @include</title><link>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/mixin-and-include/</link><pubDate>Fri, 23 Sep 2022 11:12:50 +0000</pubDate><guid>https://rick-torrellas.github.io/book__a/content/sass/concepts/at-rules/mixin-and-include/</guid><description>Los mixin son muy parecido a las clases en javascript, te permiten crear una estructura con disenos, para poder re-usarla. Permite usar parametros y asignarle un valor por defecto, para mayor versatilidad y usar mixins de otros archivos usando @use. Tambien aceptan contenido usando @content.
Mixins allow you to define styles that can be re-used throughout your stylesheet. They make it easy to avoid using non-semantic classes like .float-left, and to distribute collections of styles in libraries.</description></item></channel></rss>