<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutoriales on Book</title><link>http://example.org/content/hugo/tutorials/</link><description>Recent content in Tutoriales on Book</description><generator>Hugo -- gohugo.io</generator><language>es</language><atom:link href="http://example.org/content/hugo/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Archetypes</title><link>http://example.org/content/hugo/tutorials/archetypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/archetypes/</guid><description>Archetypes Es una carpeta donde se colocaran el molde para los archivos que seran creados con hugo new file.md, por defecto sera el archivo default.md.
Se puede cambiar tanto el front matter como el contenido que tendran todos los nuevos archivos.
Tambien se pueden crear moldes para cada archivo que este dentro de una carpeta (esto nada mas funciona para el primer nivel, para las subcarpetas, no se cual es el procedimiento si es que existe uno), para esto crearemos un archivo llamado igual que la carpeta.</description></item><item><title>Barra de navegacion</title><link>http://example.org/content/hugo/tutorials/navbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/navbar/</guid><description>Barra de navegacion Existen varias manera de establecer un menu
config.toml [menu]
[[menu.main]]
identifier = &amp;#34;about&amp;#34;
name = &amp;#34;About&amp;#34;
title = &amp;#34;About&amp;#34;
url = &amp;#34;/about/&amp;#34;
weight = 0
[[menu.main]]
identifier = &amp;#34;posts&amp;#34;
name = &amp;#34;Posts&amp;#34;
title = &amp;#34;Posts&amp;#34;
url = &amp;#34;/posts/&amp;#34;
weight = 0</description></item><item><title>Condicionales</title><link>http://example.org/content/hugo/tutorials/condicionales/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/condicionales/</guid><description>Condicionales source: If Statements | Hugo - Static Site Generator | Tutorial 19 - YouTube
eq: == igual que
lt: &amp;lt; menor que
le: =&amp;lt; menor o igual que
gt: &amp;gt; mayor que
ge: =&amp;gt; igual o igual que
not: negacion
and: &amp;amp;&amp;amp;
or: ||
If Syntax:
{{if operador condicion1 condicion2}}
{{end}} Ejemplo:
{{$uno := 2}}
{{$dos := 2}}
{{if eq $uno $dos}}
&amp;lt;p&amp;gt;true&amp;lt;/p&amp;gt;
{{end}} else y else if En hugo tambien es posible usar tantos else como else if, tantas veces sea necesario</description></item><item><title>Content</title><link>http://example.org/content/hugo/tutorials/content/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/content/</guid><description>Content Existe dos tipos de contenido en hugo, el contenido estatico, que endrian a hacer los archivos, o la lista de archivos, estos vendrian a hacer las carpetas.
IMPORTANTE: Evitar los espacios tanto para los archivos como para las carpetas, mejor usar -
Contenido estatico Para agregar contenido al sitio se puede usar un comando.
hugo new page.md O puedes crear directamente el archivo
Cada pagina tendra una metadata.
--- title: &amp;#34;Page&amp;#34; date: 2022-08-30T22:36:53-04:00 draft: true --- Para que la pagina sea visible en el sitio, tendremos que cambiar el valor de draft draft: false.</description></item><item><title>Data</title><link>http://example.org/content/hugo/tutorials/data-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/data-files/</guid><description>Data Es una mini base de datos, que puede estar escrita en JSON,YAML o TOML, los archivos se tienen que crear dentro de la carpeta de data, esta data nada mas puede ser accedida dentro del layout o theme.
Para acceder a la informacion del archivo: ola
{{.Site.Data.ola.user.name}} Donde user es el objeto y name es la propiedad que queremos acceder,
Tambien podemos acceder a todas las propiedades de manera dinamica con un loop:</description></item><item><title>Front Matter</title><link>http://example.org/content/hugo/tutorials/front-matter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/front-matter/</guid><description>Front Matter Es la metadata que aparece en el principio de cada archivo, esta son variables, que pueden estar escrtitas en YAML, TOML,JSON, cualquiera es valida.
Estas variables pueden ser accedidas por las plantillas o los templatesÂ en GO.
Se pueden crear variables custom que puedas usar en estas plantillas.
--- title: &amp;#34;Test&amp;#34; date: 2022-08-31T23:58:21-04:00 draft: false ---</description></item><item><title>Functions</title><link>http://example.org/content/hugo/tutorials/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/functions/</guid><description>Functions source: https://www.youtube.com/watch?v=w1NkCb3IJd0&amp;amp;list=PLLAZ4kZ9dFpOnyRlyS-liKL5ReHDcj4G3&amp;amp;index=18
Hugo cuentas con varias funciones.
{{ function-name param1 param2 }}</description></item><item><title>Partial Templates</title><link>http://example.org/content/hugo/tutorials/partial-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/partial-templates/</guid><description>Partial Templates Source: Partial Templates | Hugo - Static Site Generator | Tutorial 21 - YouTube
Los template partials, son pedazos de html que podemos inyectar a otros templates, como componentes de react.
Para hacer esto necesitas crear una carpeta llamada partials, dentro de la carpeta layouts.
layouts/partials/header.html
&amp;lt;header&amp;gt;
&amp;lt;p&amp;gt;header.html&amp;lt;/p&amp;gt;
&amp;lt;/header&amp;gt; Implementarlo en un template:
layouts/_default/single.html
{{partial &amp;#34;header&amp;#34; .}}
&amp;lt;p&amp;gt;single.html&amp;lt;/p&amp;gt; Nota: el punto sirve para mandarle todas las variables globales del archivo, por eso dentro de header.</description></item><item><title>Shortcodes</title><link>http://example.org/content/hugo/tutorials/shortcodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/shortcodes/</guid><description>Shortcodes source: Shortcodes | Hugo - Static Site Generator | Tutorial 9 - YouTube
Importnate: En los ejemplos se uso `, en las etiquetas html, es para evitar que hugo se ejecute. Pero es sin eso.
Son piezas de html que pueden insertar dentro de tus archivos, usando palabras claves. Hugo trae varios shorcodes por defecto.
Syntaxis {{`&amp;lt; shortcode-name params &amp;gt;`}} Ejemplos:
{{`&amp;lt; youtube 2xkNJL4gJ9E&amp;amp;list=PLLAZ4kZ9dFpOnyRlyS-liKL5ReHDcj4G3 &amp;gt;`}} Custom Shortcode source: Shortcode Templates | Hugo - Static Site Generator | Tutorial 22 - YouTube</description></item><item><title>Taxonomies</title><link>http://example.org/content/hugo/tutorials/taxonomies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/taxonomies/</guid><description>Taxonomies Las taxnomies es una manera de organizar el contenido, funciona muy parecido a las sessiones solo que mas dinamico, en esta area de las taxonomias existen dos tipos por defecto: tags y categories. Estas vienen por defecto en hugo y no necesitan ser incorporadas manualmente,
Para anadir una categorias o etiqueta.
--- title: &amp;#34;Test&amp;#34; date: 2022-08-31T23:58:21-04:00 draft: false tags: [&amp;#34;tag1&amp;#34;] categories: [&amp;#34;cat1&amp;#34;] --- Luego en tu url podras acceder tanto a esa categoria o tag o a todas las categorias o tag, localhost:1313/tags, localhost:1313/tags/tag1.</description></item><item><title>Templates</title><link>http://example.org/content/hugo/tutorials/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/templates/</guid><description>Templates source: https://www.youtube.com/watch?v=gnJbPO-GFIw&amp;amp;list=PLLAZ4kZ9dFpOnyRlyS-liKL5ReHDcj4G3&amp;amp;index=11
Los templates son como modelos que se van a usar para definir cada parte de nuestra web, son usados generalmente para crear themes, pero tambien pueden usarse sin ellos, y estan escritos con HTML,CSS,JS y GO. muy parecido a como funciona wordpress.
Todos los templates se cran dentro de estas carpetas, ya sea que vayas a ejecutarlo dentro de tu proyecto o vayas a crear un theme: layouts/_default Si tienes un tema y usas los templates estos van a sobrescribir los estes usando en el theme.</description></item><item><title>Themes</title><link>http://example.org/content/hugo/tutorials/themes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/themes/</guid><description>Theme Cada tema se puede instalar de diferente manera.
Submodulos Creo que todos pueden ser instalados como submodulos.
git submodule add https://github.com/EmielH/tale-hugo.git themes/tale Establecer tema En el archivo config.toml, coloca lo siguiente:
theme = &amp;#34;tale&amp;#34; o tambien puede usar el comando
hugo server -t tale</description></item><item><title>Variables</title><link>http://example.org/content/hugo/tutorials/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/content/hugo/tutorials/variables/</guid><description>Variables Las variables solo se pueden usar dentro de los templates.
Hugo viene que con un monton de variables.
Tambien puedes crearte tus propias variables para eso, en el font matter.
--- varName: &amp;#34;value&amp;#34; --- Para acceder a esta variable:
&amp;lt;p&amp;gt;{{.Params.varName}}&amp;lt;/p&amp;gt; Nota: si no defines la variable, no mostrra nada, no dara error ni mostrara undefined.
Tambien puedes declarar las variables dentro de la plantilla.
{{$variable := &amp;#34;Variable&amp;#34;}} single.html {{$variable}}</description></item></channel></rss>